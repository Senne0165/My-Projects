#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Ziekmelden
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Ziekmelden")]
	public partial class DataClasses1DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertZiek(Ziek instance);
    partial void UpdateZiek(Ziek instance);
    partial void DeleteZiek(Ziek instance);
    partial void InsertPersoon(Persoon instance);
    partial void UpdatePersoon(Persoon instance);
    partial void DeletePersoon(Persoon instance);
    #endregion
		
		public DataClasses1DataContext() : 
				base(global::Ziekmelden.Properties.Settings.Default.ZiekmeldenConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClasses1DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Ziek> Zieks
		{
			get
			{
				return this.GetTable<Ziek>();
			}
		}
		
		public System.Data.Linq.Table<Persoon> Persoons
		{
			get
			{
				return this.GetTable<Persoon>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Ziek")]
	public partial class Ziek : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ZiekID;
		
		private int _PersoonID;
		
		private System.DateTime _DatumZ;
		
		private System.DateTime _DatumB;
		
		private EntityRef<Persoon> _Persoon;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnZiekIDChanging(int value);
    partial void OnZiekIDChanged();
    partial void OnPersoonIDChanging(int value);
    partial void OnPersoonIDChanged();
    partial void OnDatumZChanging(System.DateTime value);
    partial void OnDatumZChanged();
    partial void OnDatumBChanging(System.DateTime value);
    partial void OnDatumBChanged();
    #endregion
		
		public Ziek()
		{
			this._Persoon = default(EntityRef<Persoon>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ZiekID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ZiekID
		{
			get
			{
				return this._ZiekID;
			}
			set
			{
				if ((this._ZiekID != value))
				{
					this.OnZiekIDChanging(value);
					this.SendPropertyChanging();
					this._ZiekID = value;
					this.SendPropertyChanged("ZiekID");
					this.OnZiekIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersoonID", DbType="Int NOT NULL")]
		public int PersoonID
		{
			get
			{
				return this._PersoonID;
			}
			set
			{
				if ((this._PersoonID != value))
				{
					if (this._Persoon.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPersoonIDChanging(value);
					this.SendPropertyChanging();
					this._PersoonID = value;
					this.SendPropertyChanged("PersoonID");
					this.OnPersoonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatumZ", DbType="Date NOT NULL")]
		public System.DateTime DatumZ
		{
			get
			{
				return this._DatumZ;
			}
			set
			{
				if ((this._DatumZ != value))
				{
					this.OnDatumZChanging(value);
					this.SendPropertyChanging();
					this._DatumZ = value;
					this.SendPropertyChanged("DatumZ");
					this.OnDatumZChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DatumB", DbType="Date NOT NULL")]
		public System.DateTime DatumB
		{
			get
			{
				return this._DatumB;
			}
			set
			{
				if ((this._DatumB != value))
				{
					this.OnDatumBChanging(value);
					this.SendPropertyChanging();
					this._DatumB = value;
					this.SendPropertyChanged("DatumB");
					this.OnDatumBChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persoon_Ziek", Storage="_Persoon", ThisKey="PersoonID", OtherKey="PersoonID", IsForeignKey=true)]
		public Persoon Persoon
		{
			get
			{
				return this._Persoon.Entity;
			}
			set
			{
				Persoon previousValue = this._Persoon.Entity;
				if (((previousValue != value) 
							|| (this._Persoon.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Persoon.Entity = null;
						previousValue.Zieks.Remove(this);
					}
					this._Persoon.Entity = value;
					if ((value != null))
					{
						value.Zieks.Add(this);
						this._PersoonID = value.PersoonID;
					}
					else
					{
						this._PersoonID = default(int);
					}
					this.SendPropertyChanged("Persoon");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Persoon")]
	public partial class Persoon : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PersoonID;
		
		private string _Voornaam;
		
		private string _Achternaam;
		
		private string _Afdeling;
		
		private EntitySet<Ziek> _Zieks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPersoonIDChanging(int value);
    partial void OnPersoonIDChanged();
    partial void OnVoornaamChanging(string value);
    partial void OnVoornaamChanged();
    partial void OnAchternaamChanging(string value);
    partial void OnAchternaamChanged();
    partial void OnAfdelingChanging(string value);
    partial void OnAfdelingChanged();
    #endregion
		
		public Persoon()
		{
			this._Zieks = new EntitySet<Ziek>(new Action<Ziek>(this.attach_Zieks), new Action<Ziek>(this.detach_Zieks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersoonID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PersoonID
		{
			get
			{
				return this._PersoonID;
			}
			set
			{
				if ((this._PersoonID != value))
				{
					this.OnPersoonIDChanging(value);
					this.SendPropertyChanging();
					this._PersoonID = value;
					this.SendPropertyChanged("PersoonID");
					this.OnPersoonIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Voornaam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Voornaam
		{
			get
			{
				return this._Voornaam;
			}
			set
			{
				if ((this._Voornaam != value))
				{
					this.OnVoornaamChanging(value);
					this.SendPropertyChanging();
					this._Voornaam = value;
					this.SendPropertyChanged("Voornaam");
					this.OnVoornaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Achternaam", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Achternaam
		{
			get
			{
				return this._Achternaam;
			}
			set
			{
				if ((this._Achternaam != value))
				{
					this.OnAchternaamChanging(value);
					this.SendPropertyChanging();
					this._Achternaam = value;
					this.SendPropertyChanged("Achternaam");
					this.OnAchternaamChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Afdeling", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Afdeling
		{
			get
			{
				return this._Afdeling;
			}
			set
			{
				if ((this._Afdeling != value))
				{
					this.OnAfdelingChanging(value);
					this.SendPropertyChanging();
					this._Afdeling = value;
					this.SendPropertyChanged("Afdeling");
					this.OnAfdelingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Persoon_Ziek", Storage="_Zieks", ThisKey="PersoonID", OtherKey="PersoonID")]
		public EntitySet<Ziek> Zieks
		{
			get
			{
				return this._Zieks;
			}
			set
			{
				this._Zieks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Zieks(Ziek entity)
		{
			this.SendPropertyChanging();
			entity.Persoon = this;
		}
		
		private void detach_Zieks(Ziek entity)
		{
			this.SendPropertyChanging();
			entity.Persoon = null;
		}
	}
}
#pragma warning restore 1591
